//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../../grammar/Vectorize.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Vectorize.Domain.Parser {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="VectorizeParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public interface IVectorizeVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] VectorizeParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction([NotNull] VectorizeParser.FunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.funcparam"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncparam([NotNull] VectorizeParser.FuncparamContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.funccall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunccall([NotNull] VectorizeParser.FunccallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.vardef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVardef([NotNull] VectorizeParser.VardefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] VectorizeParser.TypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] VectorizeParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.blockstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockstmt([NotNull] VectorizeParser.BlockstmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.vardefstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVardefstmt([NotNull] VectorizeParser.VardefstmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.varassignstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarassignstmt([NotNull] VectorizeParser.VarassignstmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.expressionstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionstmt([NotNull] VectorizeParser.ExpressionstmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.forstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForstmt([NotNull] VectorizeParser.ForstmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.ifstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfstmt([NotNull] VectorizeParser.IfstmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.whilestmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhilestmt([NotNull] VectorizeParser.WhilestmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="VectorizeParser.returnstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnstmt([NotNull] VectorizeParser.ReturnstmtContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralFloat</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralFloat([NotNull] VectorizeParser.LiteralFloatContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogEqual</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogEqual([NotNull] VectorizeParser.LogEqualContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralBool</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralBool([NotNull] VectorizeParser.LiteralBoolContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralString</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralString([NotNull] VectorizeParser.LiteralStringContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Para</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPara([NotNull] VectorizeParser.ParaContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogOr</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogOr([NotNull] VectorizeParser.LogOrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Var</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVar([NotNull] VectorizeParser.VarContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BinaryAddSub</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryAddSub([NotNull] VectorizeParser.BinaryAddSubContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogRel</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogRel([NotNull] VectorizeParser.LogRelContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralInt</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralInt([NotNull] VectorizeParser.LiteralIntContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Unary</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnary([NotNull] VectorizeParser.UnaryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BinaryMulDivMod</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryMulDivMod([NotNull] VectorizeParser.BinaryMulDivModContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogAnd</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogAnd([NotNull] VectorizeParser.LogAndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FuncCall</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncCall([NotNull] VectorizeParser.FuncCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArrayAccess</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayAccess([NotNull] VectorizeParser.ArrayAccessContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogNot</c>
	/// labeled alternative in <see cref="VectorizeParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogNot([NotNull] VectorizeParser.LogNotContext context);
}
} // namespace Vectorize.Domain.Parser
