//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../grammar/Vectorize.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Vectorize.Domain.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class VectorizeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		WS=39, INT=40, FLOAT=41, STRING=42, BOOL=43, ID=44, LINECMT=45;
	public const int
		RULE_program = 0, RULE_function = 1, RULE_funcparam = 2, RULE_funccall = 3, 
		RULE_vardef = 4, RULE_type = 5, RULE_statement = 6, RULE_blockstmt = 7, 
		RULE_vardefstmt = 8, RULE_varassignstmt = 9, RULE_expressionstmt = 10, 
		RULE_forstmt = 11, RULE_ifstmt = 12, RULE_whilestmt = 13, RULE_returnstmt = 14, 
		RULE_expression = 15;
	public static readonly string[] ruleNames = {
		"program", "function", "funcparam", "funccall", "vardef", "type", "statement", 
		"blockstmt", "vardefstmt", "varassignstmt", "expressionstmt", "forstmt", 
		"ifstmt", "whilestmt", "returnstmt", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'fn'", "'('", "','", "')'", "'->'", "'['", "']'", "':'", "'let'", 
		"'='", "'int'", "'float'", "'bool'", "'string'", "';'", "'{'", "'}'", 
		"'for'", "'if'", "'else'", "'while'", "'return'", "'++'", "'--'", "'!'", 
		"'*'", "'/'", "'%'", "'+'", "'-'", "'<'", "'<='", "'>'", "'>='", "'=='", 
		"'!='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "WS", "INT", "FLOAT", "STRING", "BOOL", "ID", "LINECMT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Vectorize.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static VectorizeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VectorizeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VectorizeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 32; function();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken array;
		public ITerminalNode ID() { return GetToken(VectorizeParser.ID, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FuncparamContext[] funcparam() {
			return GetRuleContexts<FuncparamContext>();
		}
		public FuncparamContext funcparam(int i) {
			return GetRuleContext<FuncparamContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(T__0);
			State = 38; Match(ID);
			State = 39; Match(T__1);
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 40; funcparam();
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 41; Match(T__2);
					State = 42; funcparam();
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 50; Match(T__3);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 51; Match(T__4);
				State = 52; type();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 53; _localctx.array = Match(T__5);
					State = 54; Match(T__6);
					}
				}

				}
			}

			State = 59; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncparamContext : ParserRuleContext {
		public IToken array;
		public ITerminalNode ID() { return GetToken(VectorizeParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FuncparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterFuncparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitFuncparam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncparam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncparamContext funcparam() {
		FuncparamContext _localctx = new FuncparamContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcparam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(ID);
			State = 62; Match(T__7);
			State = 63; type();
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 64; _localctx.array = Match(T__5);
				State = 65; Match(T__6);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(VectorizeParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterFunccall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitFunccall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 6, RULE_funccall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(ID);
			State = 69; Match(T__1);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__24) | (1L << INT) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << ID))) != 0)) {
				{
				State = 70; expression(0);
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 71; Match(T__2);
					State = 72; expression(0);
					}
					}
					State = 77;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 80; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardefContext : ParserRuleContext {
		public IToken array;
		public ExpressionContext size;
		public ExpressionContext initial;
		public ITerminalNode ID() { return GetToken(VectorizeParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VardefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterVardef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitVardef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardefContext vardef() {
		VardefContext _localctx = new VardefContext(Context, State);
		EnterRule(_localctx, 8, RULE_vardef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(T__8);
			State = 83; Match(ID);
			State = 84; Match(T__7);
			State = 85; type();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 86; _localctx.array = Match(T__5);
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__24) | (1L << INT) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << ID))) != 0)) {
					{
					State = 87; _localctx.size = expression(0);
					}
				}

				State = 90; Match(T__6);
				}
			}

			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 93; Match(T__9);
				State = 94; _localctx.initial = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockstmtContext blockstmt() {
			return GetRuleContext<BlockstmtContext>(0);
		}
		public VardefstmtContext vardefstmt() {
			return GetRuleContext<VardefstmtContext>(0);
		}
		public VarassignstmtContext varassignstmt() {
			return GetRuleContext<VarassignstmtContext>(0);
		}
		public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		public ForstmtContext forstmt() {
			return GetRuleContext<ForstmtContext>(0);
		}
		public WhilestmtContext whilestmt() {
			return GetRuleContext<WhilestmtContext>(0);
		}
		public ReturnstmtContext returnstmt() {
			return GetRuleContext<ReturnstmtContext>(0);
		}
		public ExpressionstmtContext expressionstmt() {
			return GetRuleContext<ExpressionstmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; blockstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; vardefstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; varassignstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 102; funccall();
				State = 103; Match(T__14);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 105; ifstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 106; forstmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 107; whilestmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 108; returnstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 109; expressionstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockstmtContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterBlockstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitBlockstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockstmtContext blockstmt() {
		BlockstmtContext _localctx = new BlockstmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_blockstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(T__15);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__8) | (1L << T__15) | (1L << T__17) | (1L << T__18) | (1L << T__20) | (1L << T__21) | (1L << T__24) | (1L << INT) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << ID))) != 0)) {
				{
				{
				State = 113; statement();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardefstmtContext : ParserRuleContext {
		public VardefContext vardef() {
			return GetRuleContext<VardefContext>(0);
		}
		public VardefstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardefstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterVardefstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitVardefstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardefstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardefstmtContext vardefstmt() {
		VardefstmtContext _localctx = new VardefstmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_vardefstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; vardef();
			State = 122; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarassignstmtContext : ParserRuleContext {
		public ExpressionContext index;
		public ExpressionContext value;
		public ITerminalNode ID() { return GetToken(VectorizeParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VarassignstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varassignstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterVarassignstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitVarassignstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarassignstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarassignstmtContext varassignstmt() {
		VarassignstmtContext _localctx = new VarassignstmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_varassignstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(ID);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 125; Match(T__5);
				State = 126; _localctx.index = expression(0);
				State = 127; Match(T__6);
				}
			}

			State = 131; Match(T__9);
			State = 132; _localctx.value = expression(0);
			State = 133; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionstmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterExpressionstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitExpressionstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionstmtContext expressionstmt() {
		ExpressionstmtContext _localctx = new ExpressionstmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_expressionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; expression(0);
			State = 136; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstmtContext : ParserRuleContext {
		public VardefContext vardef() {
			return GetRuleContext<VardefContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterForstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitForstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstmtContext forstmt() {
		ForstmtContext _localctx = new ForstmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_forstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(T__17);
			State = 139; Match(T__1);
			State = 140; vardef();
			State = 141; Match(T__14);
			State = 142; expression(0);
			State = 143; Match(T__14);
			State = 144; expression(0);
			State = 145; Match(T__3);
			State = 146; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifstmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(T__18);
			State = 149; Match(T__1);
			State = 150; expression(0);
			State = 151; Match(T__3);
			State = 152; statement();
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 153; Match(T__19);
					State = 154; Match(T__18);
					State = 155; Match(T__1);
					State = 156; expression(0);
					State = 157; Match(T__3);
					State = 158; statement();
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 165; Match(T__19);
				State = 166; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhilestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilestmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterWhilestmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitWhilestmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestmtContext whilestmt() {
		WhilestmtContext _localctx = new WhilestmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_whilestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(T__20);
			State = 170; Match(T__1);
			State = 171; expression(0);
			State = 172; Match(T__3);
			State = 173; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterReturnstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitReturnstmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstmtContext returnstmt() {
		ReturnstmtContext _localctx = new ReturnstmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_returnstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(T__21);
			State = 176; expression(0);
			State = 177; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralFloatContext : ExpressionContext {
		public ITerminalNode FLOAT() { return GetToken(VectorizeParser.FLOAT, 0); }
		public LiteralFloatContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogEqualContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogEqualContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterLogEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitLogEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralBoolContext : ExpressionContext {
		public ITerminalNode BOOL() { return GetToken(VectorizeParser.BOOL, 0); }
		public LiteralBoolContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterLiteralBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitLiteralBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralStringContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(VectorizeParser.STRING, 0); }
		public LiteralStringContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParaContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParaContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterPara(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitPara(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPara(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogOrContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogOrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterLogOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitLogOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(VectorizeParser.ID, 0); }
		public VarContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryAddSubContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryAddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterBinaryAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitBinaryAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogRelContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogRelContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterLogRel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitLogRel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogRel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralIntContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(VectorizeParser.INT, 0); }
		public LiteralIntContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterLiteralInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitLiteralInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryMulDivModContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryMulDivModContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterBinaryMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitBinaryMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogAndContext : ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogAndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterLogAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitLogAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallContext : ExpressionContext {
		public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public FuncCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(VectorizeParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogNotContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogNotContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.EnterLogNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVectorizeListener typedListener = listener as IVectorizeListener;
			if (typedListener != null) typedListener.ExitLogNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVectorizeVisitor<TResult> typedVisitor = visitor as IVectorizeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				_localctx = new ParaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 180; Match(T__1);
				State = 181; expression(0);
				State = 182; Match(T__3);
				}
				break;
			case 2:
				{
				_localctx = new ArrayAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 184; Match(ID);
				State = 185; Match(T__5);
				State = 186; expression(0);
				State = 187; Match(T__6);
				}
				break;
			case 3:
				{
				_localctx = new LogNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 189; Match(T__24);
				State = 190; expression(13);
				}
				break;
			case 4:
				{
				_localctx = new LiteralIntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 191; Match(INT);
				}
				break;
			case 5:
				{
				_localctx = new LiteralFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 192; Match(FLOAT);
				}
				break;
			case 6:
				{
				_localctx = new LiteralStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 193; Match(STRING);
				}
				break;
			case 7:
				{
				_localctx = new LiteralBoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 194; Match(BOOL);
				}
				break;
			case 8:
				{
				_localctx = new VarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 195; Match(ID);
				}
				break;
			case 9:
				{
				_localctx = new FuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 196; funccall();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 219;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new BinaryMulDivModContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryMulDivModContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 199;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 200;
						((BinaryMulDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
							((BinaryMulDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 201; ((BinaryMulDivModContext)_localctx).rhs = expression(13);
						}
						break;
					case 2:
						{
						_localctx = new BinaryAddSubContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryAddSubContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 202;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 203;
						((BinaryAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__28 || _la==T__29) ) {
							((BinaryAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 204; ((BinaryAddSubContext)_localctx).rhs = expression(12);
						}
						break;
					case 3:
						{
						_localctx = new LogRelContext(new ExpressionContext(_parentctx, _parentState));
						((LogRelContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 205;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 206;
						((LogRelContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33))) != 0)) ) {
							((LogRelContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 207; ((LogRelContext)_localctx).rhs = expression(11);
						}
						break;
					case 4:
						{
						_localctx = new LogEqualContext(new ExpressionContext(_parentctx, _parentState));
						((LogEqualContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 208;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 209;
						((LogEqualContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__34 || _la==T__35) ) {
							((LogEqualContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 210; ((LogEqualContext)_localctx).rhs = expression(10);
						}
						break;
					case 5:
						{
						_localctx = new LogAndContext(new ExpressionContext(_parentctx, _parentState));
						((LogAndContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 211;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 212; Match(T__36);
						State = 213; ((LogAndContext)_localctx).rhs = expression(9);
						}
						break;
					case 6:
						{
						_localctx = new LogOrContext(new ExpressionContext(_parentctx, _parentState));
						((LogOrContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 214;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 215; Match(T__37);
						State = 216; ((LogOrContext)_localctx).rhs = expression(8);
						}
						break;
					case 7:
						{
						_localctx = new UnaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 217;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 218;
						((UnaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__22 || _la==T__23) ) {
							((UnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 14);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '/', '\xE3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x6', '\x2', '$', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '%', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '.', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x31', '\v', '\x3', '\x5', '\x3', '\x33', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', ':', '\n', '\x3', '\x5', '\x3', '<', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x45', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'L', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'O', '\v', '\x5', '\x5', 
		'\x5', 'Q', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '[', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', '^', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x62', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', 'q', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', 'u', '\n', '\t', '\f', '\t', '\xE', '\t', 'x', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\x84', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xA3', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xA6', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xAA', '\n', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xC8', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\xDE', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xE1', '\v', '\x11', 
		'\x3', '\x11', '\x2', '\x3', ' ', '\x12', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\x2', '\b', '\x3', '\x2', '\r', '\x10', '\x3', '\x2', '\x1C', '\x1E', 
		'\x3', '\x2', '\x1F', ' ', '\x3', '\x2', '!', '$', '\x3', '\x2', '%', 
		'&', '\x3', '\x2', '\x19', '\x1A', '\x2', '\xF8', '\x2', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\'', '\x3', '\x2', '\x2', '\x2', '\x6', '?', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x46', '\x3', '\x2', '\x2', '\x2', '\n', 'T', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'p', '\x3', '\x2', '\x2', '\x2', '\x10', 'r', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '{', '\x3', '\x2', '\x2', '\x2', '\x14', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x89', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xC7', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\x5', 
		'\x4', '\x3', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', 
		'\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\x3', '\x2', '\x2', '\x2', '&', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\a', '\x3', '\x2', '\x2', '(', ')', '\a', '.', '\x2', '\x2', 
		')', '\x32', '\a', '\x4', '\x2', '\x2', '*', '/', '\x5', '\x6', '\x4', 
		'\x2', '+', ',', '\a', '\x5', '\x2', '\x2', ',', '.', '\x5', '\x6', '\x4', 
		'\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x32', '*', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x34', ';', '\a', '\x6', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\a', '\x2', '\x2', '\x36', '\x39', '\x5', '\f', '\a', '\x2', '\x37', 
		'\x38', '\a', '\b', '\x2', '\x2', '\x38', ':', '\a', '\t', '\x2', '\x2', 
		'\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', 
		'\x2', '\x2', ':', '<', '\x3', '\x2', '\x2', '\x2', ';', '\x35', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\x5', '\xE', '\b', '\x2', '>', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '.', '\x2', '\x2', '@', '\x41', 
		'\a', '\n', '\x2', '\x2', '\x41', '\x44', '\x5', '\f', '\a', '\x2', '\x42', 
		'\x43', '\a', '\b', '\x2', '\x2', '\x43', '\x45', '\a', '\t', '\x2', '\x2', 
		'\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\a', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', 
		'.', '\x2', '\x2', 'G', 'P', '\a', '\x4', '\x2', '\x2', 'H', 'M', '\x5', 
		' ', '\x11', '\x2', 'I', 'J', '\a', '\x5', '\x2', '\x2', 'J', 'L', '\x5', 
		' ', '\x11', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'H', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', 
		'\x6', '\x2', '\x2', 'S', '\t', '\x3', '\x2', '\x2', '\x2', 'T', 'U', 
		'\a', '\v', '\x2', '\x2', 'U', 'V', '\a', '.', '\x2', '\x2', 'V', 'W', 
		'\a', '\n', '\x2', '\x2', 'W', ']', '\x5', '\f', '\a', '\x2', 'X', 'Z', 
		'\a', '\b', '\x2', '\x2', 'Y', '[', '\x5', ' ', '\x11', '\x2', 'Z', 'Y', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\a', '\t', '\x2', '\x2', 
		']', 'X', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x61', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\f', '\x2', 
		'\x2', '`', '\x62', '\x5', ' ', '\x11', '\x2', '\x61', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\t', '\x2', '\x2', '\x2', 
		'\x64', '\r', '\x3', '\x2', '\x2', '\x2', '\x65', 'q', '\x5', '\x10', 
		'\t', '\x2', '\x66', 'q', '\x5', '\x12', '\n', '\x2', 'g', 'q', '\x5', 
		'\x14', '\v', '\x2', 'h', 'i', '\x5', '\b', '\x5', '\x2', 'i', 'j', '\a', 
		'\x11', '\x2', '\x2', 'j', 'q', '\x3', '\x2', '\x2', '\x2', 'k', 'q', 
		'\x5', '\x1A', '\xE', '\x2', 'l', 'q', '\x5', '\x18', '\r', '\x2', 'm', 
		'q', '\x5', '\x1C', '\xF', '\x2', 'n', 'q', '\x5', '\x1E', '\x10', '\x2', 
		'o', 'q', '\x5', '\x16', '\f', '\x2', 'p', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'p', '\x66', '\x3', '\x2', '\x2', '\x2', 'p', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'h', '\x3', '\x2', '\x2', '\x2', 'p', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'l', '\x3', '\x2', '\x2', '\x2', 'p', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'q', '\xF', '\x3', '\x2', '\x2', '\x2', 'r', 'v', '\a', 
		'\x12', '\x2', '\x2', 's', 'u', '\x5', '\xE', '\b', '\x2', 't', 's', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', 
		'\x13', '\x2', '\x2', 'z', '\x11', '\x3', '\x2', '\x2', '\x2', '{', '|', 
		'\x5', '\n', '\x6', '\x2', '|', '}', '\a', '\x11', '\x2', '\x2', '}', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '~', '\x83', '\a', '.', '\x2', '\x2', 
		'\x7F', '\x80', '\a', '\b', '\x2', '\x2', '\x80', '\x81', '\x5', ' ', 
		'\x11', '\x2', '\x81', '\x82', '\a', '\t', '\x2', '\x2', '\x82', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\a', '\f', '\x2', '\x2', '\x86', '\x87', 
		'\x5', ' ', '\x11', '\x2', '\x87', '\x88', '\a', '\x11', '\x2', '\x2', 
		'\x88', '\x15', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x5', ' ', 
		'\x11', '\x2', '\x8A', '\x8B', '\a', '\x11', '\x2', '\x2', '\x8B', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '\x14', '\x2', '\x2', 
		'\x8D', '\x8E', '\a', '\x4', '\x2', '\x2', '\x8E', '\x8F', '\x5', '\n', 
		'\x6', '\x2', '\x8F', '\x90', '\a', '\x11', '\x2', '\x2', '\x90', '\x91', 
		'\x5', ' ', '\x11', '\x2', '\x91', '\x92', '\a', '\x11', '\x2', '\x2', 
		'\x92', '\x93', '\x5', ' ', '\x11', '\x2', '\x93', '\x94', '\a', '\x6', 
		'\x2', '\x2', '\x94', '\x95', '\x5', '\xE', '\b', '\x2', '\x95', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', '\x15', '\x2', '\x2', 
		'\x97', '\x98', '\a', '\x4', '\x2', '\x2', '\x98', '\x99', '\x5', ' ', 
		'\x11', '\x2', '\x99', '\x9A', '\a', '\x6', '\x2', '\x2', '\x9A', '\xA4', 
		'\x5', '\xE', '\b', '\x2', '\x9B', '\x9C', '\a', '\x16', '\x2', '\x2', 
		'\x9C', '\x9D', '\a', '\x15', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x4', 
		'\x2', '\x2', '\x9E', '\x9F', '\x5', ' ', '\x11', '\x2', '\x9F', '\xA0', 
		'\a', '\x6', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\xE', '\b', '\x2', 
		'\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\a', '\x16', '\x2', '\x2', '\xA8', '\xAA', 
		'\x5', '\xE', '\b', '\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xAC', '\a', '\x17', '\x2', '\x2', '\xAC', '\xAD', 
		'\a', '\x4', '\x2', '\x2', '\xAD', '\xAE', '\x5', ' ', '\x11', '\x2', 
		'\xAE', '\xAF', '\a', '\x6', '\x2', '\x2', '\xAF', '\xB0', '\x5', '\xE', 
		'\b', '\x2', '\xB0', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', 
		'\a', '\x18', '\x2', '\x2', '\xB2', '\xB3', '\x5', ' ', '\x11', '\x2', 
		'\xB3', '\xB4', '\a', '\x11', '\x2', '\x2', '\xB4', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB6', '\b', '\x11', '\x1', '\x2', '\xB6', '\xB7', 
		'\a', '\x4', '\x2', '\x2', '\xB7', '\xB8', '\x5', ' ', '\x11', '\x2', 
		'\xB8', '\xB9', '\a', '\x6', '\x2', '\x2', '\xB9', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\xBB', '\a', '.', '\x2', '\x2', '\xBB', '\xBC', 
		'\a', '\b', '\x2', '\x2', '\xBC', '\xBD', '\x5', ' ', '\x11', '\x2', '\xBD', 
		'\xBE', '\a', '\t', '\x2', '\x2', '\xBE', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\a', '\x1B', '\x2', '\x2', '\xC0', '\xC8', '\x5', 
		' ', '\x11', '\xF', '\xC1', '\xC8', '\a', '*', '\x2', '\x2', '\xC2', '\xC8', 
		'\a', '+', '\x2', '\x2', '\xC3', '\xC8', '\a', ',', '\x2', '\x2', '\xC4', 
		'\xC8', '\a', '-', '\x2', '\x2', '\xC5', '\xC8', '\a', '.', '\x2', '\x2', 
		'\xC6', '\xC8', '\x5', '\b', '\x5', '\x2', '\xC7', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\f', '\xE', 
		'\x2', '\x2', '\xCA', '\xCB', '\t', '\x3', '\x2', '\x2', '\xCB', '\xDE', 
		'\x5', ' ', '\x11', '\xF', '\xCC', '\xCD', '\f', '\r', '\x2', '\x2', '\xCD', 
		'\xCE', '\t', '\x4', '\x2', '\x2', '\xCE', '\xDE', '\x5', ' ', '\x11', 
		'\xE', '\xCF', '\xD0', '\f', '\f', '\x2', '\x2', '\xD0', '\xD1', '\t', 
		'\x5', '\x2', '\x2', '\xD1', '\xDE', '\x5', ' ', '\x11', '\r', '\xD2', 
		'\xD3', '\f', '\v', '\x2', '\x2', '\xD3', '\xD4', '\t', '\x6', '\x2', 
		'\x2', '\xD4', '\xDE', '\x5', ' ', '\x11', '\f', '\xD5', '\xD6', '\f', 
		'\n', '\x2', '\x2', '\xD6', '\xD7', '\a', '\'', '\x2', '\x2', '\xD7', 
		'\xDE', '\x5', ' ', '\x11', '\v', '\xD8', '\xD9', '\f', '\t', '\x2', '\x2', 
		'\xD9', '\xDA', '\a', '(', '\x2', '\x2', '\xDA', '\xDE', '\x5', ' ', '\x11', 
		'\n', '\xDB', '\xDC', '\f', '\x10', '\x2', '\x2', '\xDC', '\xDE', '\t', 
		'\a', '\x2', '\x2', '\xDD', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '!', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\x15', '%', '/', '\x32', '\x39', 
		';', '\x44', 'M', 'P', 'Z', ']', '\x61', 'p', 'v', '\x83', '\xA4', '\xA9', 
		'\xC7', '\xDD', '\xDF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Vectorize.Domain.Parser
